---
description: Enforce precise problem-solving by prioritizing root cause analysis, confirming issues thoroughly, and avoiding excessive fallbacks or error handling.
globs: []
alwaysApply: true
---

# Precise Problem Fixing

## Core
- Prioritize identifying the root cause: Always investigate deeply to understand the underlying issue before any fixes.
- Confirm the problem fully—analyze symptoms, context, logs, and tests to verify and pinpoint the exact root cause.
- Target fixes directly at the root cause; superficial workarounds are prohibited.

## Avoid Over-Engineering
- Do not add fallbacks, try-catch, or error handling unless they directly address the confirmed root cause.
- Avoid "defensive programming" for hypothetical edges; focus solely on resolving the identified issue.
- Keep fixes minimal: Eliminate redundant code that doesn't target the root cause.

## Methodology
- **Step 1: Observe and Reproduce**: Identify symptoms and reproduce the issue consistently to understand when/where it occurs.
- **Step 2: Gather Data**: Review existing logs, add temporary targeted logs or use debugging tools to collect relevant information (e.g., variable states, execution paths).
- **Step 3: Hypothesize Root Cause**: Formulate potential underlying causes based on data; prioritize likely sources like logic errors, data flows, or integrations.
- **Step 4: Simplify and Refactor**: If needed, refactor the surrounding code to isolate and simplify the problem area, making the root cause clearer without altering core logic.
- **Step 5: Verify Hypothesis**: Test hypotheses through isolated experiments, code reviews, or simulations to confirm the true root cause.
- **Step 6: Implement Targeted Fix**: Apply the minimal change—or rewrite the section if necessary—that directly resolves the root cause, ensuring no side effects and maximal simplification.
- **Step 7: Validate and Clean Up**: Run comprehensive tests to verify resolution; remove any temporary logs or aids added during diagnosis.

## Resolution Approach
- **Diagnose Root Cause**: Use debugging tools, existing logs, or strategically add temporary, targeted logs (e.g., console.log or structured logging at key points) to trace execution flow and variable states—remove them after diagnosis. Employ the smartest methods like conditional logging or breakpoints for efficiency.
- **Fix Precisely**: Implement the most direct solution that eliminates the root cause without introducing new issues; refactor or rewrite to simplify if it aids clarity and resolution.
- **Validate**: Test thoroughly to ensure the fix resolves the root cause and maintains code efficiency.

This rule ensures efficient code maintenance by mandating root cause analysis over quick or broad fixes.