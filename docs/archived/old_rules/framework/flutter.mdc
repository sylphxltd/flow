---
description: Flutter framework-specific rules and best practices
globs: ["**/*.dart", "**/lib/**/*", "**/test/**/*"]
alwaysApply: true
---

# Flutter Key Rules

## Structure
- core/ (utils/services), features/ (modules/routing), shared/ (widgets/themes), models/ (DTOs).

## Widgets
- Small stateless preferred; single concern for stateful.
- Stable Keys for lists; <200 lines/file; extract subs.

## State
- Provider (simple), Riverpod (DI), Bloc (events).
- Dispose all resources; no singletons; use DI/scoped providers.

## Data
- Repo abstractions for layers; expose loading/empty/error/offline.
- Central error translation for UI-safe failures.

## Performance
- `const` constructors; memoize computations; `ListView.builder` for large lists.
- Profile with DevTools.

## Avoid
- `print`/debugPrint in prod; use structured logger.
- Business logic in widgets.
- Leaks post-disposal.

## Tests
- Unit for domain (mocks/fakes).
- Widget for UI (accessibility/goldens).
- Integration on CI for journeys.
