---
description: ID generation strategies and best practices
globs: ["**/server/**/*.{ts,tsx}", "**/lib/**/*.{ts,tsx}", "**/api/**/*.{ts,tsx}", "**/services/**/*.{ts,tsx}"]
alwaysApply: true
---

# ID Generation Rules

## Redis Streams Entry IDs
- Use Redis Streams auto-generated entry IDs (`XADD *`) as authoritative IDs for "play/resume" operations.
- These IDs serve as cursors for stream consumption and replay functionality.
- Benefits: Monotonically increasing, timestamp-based, collision-free.

## Business Object IDs
- Server-generated UUIDv7/ULID for sessionId/partId/messageId.
- Provides global uniqueness, sortable by time, URL-safe.
- Most stable approach for distributed systems.

## Client Correlation IDs
- Client can provide `clientCorrelationId` for reconciliation/debugging.
- Not authoritative - server IDs take precedence.
- Useful for client-side deduplication and request tracking.

## Anti-patterns
- ❌ DB auto-increment IDs (not suitable for distributed systems)
- ❌ Client-authoritative IDs (breaks server sovereignty)
- ❌ Random UUIDs without time component (not sortable)