---
description: Next.js framework-specific rules and best practices
globs: ["**/*.{ts,tsx,js,jsx}", "**/app/**/*", "**/pages/**/*", "**/lib/**/*"]
alwaysApply: true
---

# Next.js Rules

## 🏗️ Framework Patterns
- App Router exclusively (no Pages Router)
- Server Components for data fetching
- Client Components only when needed
- Server Actions for form mutations

## 📁 Project Structure
```
├── app/                 # Next.js App Router
│   ├── layout.tsx       # Root layout
│   ├── page.tsx         # Home page
│   ├── loading.tsx      # Loading UI
│   └── not-found.tsx    # 404 page
├── components/          # Reusable components
├── lib/                 # Utilities and configurations
│   ├── db/             # Database configuration
│   ├── trpc/           # tRPC configuration
│   └── store/          # State management
├── hooks/              # Custom React hooks
└── types/              # TypeScript definitions
```

## 🎯 Component Design
- Functional components with hooks (see react.mdc)
- TypeScript strict typing
- Component composition over inheritance
- Server/Client component separation

## 🎣 Hooks & State Management
- Built-in React hooks (see react.mdc)
- Custom hooks for reusable logic
- Rules of Hooks compliance
- Proper cleanup in effects
- Zustand for complex state (optional)

## 🔄 Data Fetching Patterns
- Server Components for initial data
- Client Components for interactive data
- Server Actions for mutations
- tRPC for type-safe APIs (recommended)
- Streaming and Suspense for UX

## 🛠️ Recommended Tool Integration
- **Type-Safe Styling**: Compatible with PandaCSS patterns
- **Database Layer**: Compatible with Drizzle ORM for type-safe queries
- **API Layer**: Compatible with tRPC for end-to-end type safety
- **State Management**: Compatible with Zustand for type-safe state
- **Code Quality**: Compatible with Biome linting and formatting
- **Testing**: Compatible with Vitest + Testing Library

## 🚀 Performance Features
- Automatic code splitting
- Image optimization with Next.js Image
- Font optimization
- Bundle analyzer integration

## ⚙️ Configuration
- next.config.js for build settings
- Environment variables with Zod validation
- Middleware for routing logic
- API routes for external integrations

## 🚫 Forbidden Practices
- Pages Router in new projects
- Client-side data fetching in Server Components
- Heavy computations in render
- Missing error boundaries
- Raw database queries (use type-safe ORM)
- Manual state management without proper patterns
- Traditional CSS without design system
- Unnecessary client-side API calls

## 🎯 Best Practices
- Use TypeScript for better DX
- Leverage built-in optimizations
- Proper loading and error states
- SEO optimization with metadata API
- Type-safe configuration with Zod