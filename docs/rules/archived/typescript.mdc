---
description:
globs:
alwaysApply: true
---

# TypeScript

   - Always run in strict mode.
   - All public APIs must have explicit types.
   - Unsafe assertions are forbidden (`as any`, `as unknown as`, `// @ts-ignore`, `// @ts-expect-error` without justification).
   - Ambient declarations policy (prevent type erasure):
     - Do not introduce globals using `declare var|const|function|class|module` in application/source code. Prefer explicit imports or proper module augmentation.
     - Never place `declare` statements in `.ts` or `.svelte` files. Only allow in `.d.ts` under `src/types/ambient/`, with precise types (no `any`) and a short comment explaining the rationale.
     - Do not shadow an existing, correctly typed symbol with a higher-scope `declare` of a looser type. This erases downstream inference and breaks typings.
     - For browser/Node globals, extend the appropriate global interface in a dedicated `.d.ts` (e.g., `interface Window { ... }`, `declare namespace NodeJS { interface ProcessEnv { ... } }`) with precise types.
     - Prefer `import type` and explicit generics to preserve inference; avoid ambient workarounds that mask real typing issues.
     - Enforcement: builds must fail if `declare (var|const|function|class|module)` is used outside `.d.ts`. Add a Biome custom rule or CI grep to block these patterns in source files.