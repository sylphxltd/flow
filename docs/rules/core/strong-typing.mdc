---
description: Enforce strong TypeScript typing by assuming user types are correct, preserving them, and avoiding loose casts or bypasses.
globs: []
alwaysApply: true
---

# Strong Typing Principles

## Core
- Always assume user-defined TypeScript types are correct; never presume they are wrong or modify them to "fix" issues.
- If unfamiliar with a type, research it thoroughly (e.g., review codebase, official docs, or online resources) before proceeding.
- Preserve and infer user types from context; retain all existing type annotations and structures.

## Strengthen Types
- Only enhance type strictness (e.g., narrow `unknown` to specific types via guards or inference); never loosen types.
- Use type guards, conditional types, or utilities to improve safety without altering user intent.
- Prefer type inference and explicit annotations for domain modeling; aim for compile-time type safety.

## Prohibited Practices
- Bypassing errors with `as any`, `as unknown as T`, or similar loose casts—absolutely forbidden.
- Creating ad-hoc types or casts that undermine existing type safety; no type erasure or quick fixes.
- Modifying user types to resolve issues; instead, adapt code to fit the correct types.

## Resolution Approach
- Investigate type usage in the codebase or docs to understand proper integration.
- Refactor code to align with strong types; if needed, suggest user clarification without assuming errors.
- Ensure all changes maintain or improve type safety—strong typing is paramount.

This rule ensures robust, maintainable TypeScript code by upholding user-defined types and promoting precise typing.