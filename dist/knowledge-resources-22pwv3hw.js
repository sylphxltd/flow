import"./index-tncp4b5b.js";function k(){return[{uri:"knowledge://stacks/react-app",title:"React App",description:"React application patterns, hooks, components, and best practices",content:"",category:"stacks"},{uri:"knowledge://stacks/nextjs-app",title:"Next.js App",description:"Next.js patterns, routing, API routes, and deployment strategies",content:"",category:"stacks"},{uri:"knowledge://stacks/node-api",title:"Node.js API",description:"Node.js API patterns, middleware, authentication, and database integration",content:"",category:"stacks"},{uri:"knowledge://data/sql",title:"SQL Patterns",description:"SQL queries, indexing, migrations, and database optimization",content:"",category:"data"},{uri:"knowledge://guides/saas-template",title:"SaaS Template",description:"SaaS application architecture, multi-tenancy, and scaling patterns",content:"",category:"guides"},{uri:"knowledge://guides/tech-stack",title:"Tech Stack Guide",description:"Technology selection, architecture decisions, and stack composition",content:"",category:"guides"},{uri:"knowledge://guides/ui-ux",title:"UI/UX Patterns",description:"User interface patterns, UX principles, and frontend architecture",content:"",category:"guides"},{uri:"knowledge://universal/security",title:"Security",description:"Security best practices, authentication, authorization, and vulnerability prevention",content:"",category:"universal"},{uri:"knowledge://universal/performance",title:"Performance",description:"Performance optimization, caching, monitoring, and scaling strategies",content:"",category:"universal"},{uri:"knowledge://universal/testing",title:"Testing",description:"Testing strategies, unit tests, integration tests, and quality assurance",content:"",category:"universal"},{uri:"knowledge://universal/deployment",title:"Deployment",description:"Deployment strategies, CI/CD, infrastructure, and monitoring",content:"",category:"universal"}]}function q(b){let f=k().find((j)=>j.uri===b);if(!f)throw Error(`Knowledge resource not found: ${b}`);let h=b.split("/")[2],p=b.split("/").pop();return`# ${f.title}

**URI:** ${b}
**Category:** ${h}
**Description:** ${f.description}

*Note: This is a placeholder implementation. In a full implementation, this would load the actual content from knowledge files.*`}export{q as getKnowledgeContent,k as getAllKnowledgeResources};
