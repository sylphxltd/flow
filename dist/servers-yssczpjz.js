import{P as H,T as D}from"./index-9skdpcen.js";import{W as J,Z as L}from"./index-b8xrx8ea.js";var x={"sylphx-flow":{id:"sylphx-flow",name:"sylphx-flow",description:"Sylphx Flow MCP server for agent coordination and memory management",config:{type:"stdio",command:"npx",args:async()=>{let{useTargetConfig:k}=await import("./useTargetConfig-hxk6nnah.js"),q=await k(),w=["-y","github:sylphxltd/flow","mcp","start"];if(q?.disableMemory)w.push("--disable-memory");if(q?.disableTime)w.push("--disable-time");if(q?.disableProjectStartup)w.push("--disable-project-startup");if(q?.disableKnowledge)w.push("--disable-knowledge");if(q?.disableCodebase)w.push("--disable-codebase");return w},env:{OPENAI_API_KEY:"",OPENAI_BASE_URL:"https://api.openai.com/v1",EMBEDDING_MODEL:"text-embedding-3-small"}},envVars:{OPENAI_API_KEY:{description:"OpenAI API key for vector search embeddings",required:!1,secret:!0},OPENAI_BASE_URL:{description:"Base URL for OpenAI-compatible embedding API",required:!1,default:"https://api.openai.com/v1"},EMBEDDING_MODEL:{description:"Embedding model to use for vector search",required:!1,default:"text-embedding-3-small",dependsOn:["OPENAI_API_KEY","OPENAI_BASE_URL"],fetchChoices:async()=>{let k=D.getEnvVar("OPENAI_BASE_URL","https://api.openai.com/v1"),q=D.getEnvVar("OPENAI_API_KEY");if(!q)throw Error("OPENAI_API_KEY is required to fetch embedding models");try{H.apiKey.parse(q)}catch(z){throw Error("Invalid OPENAI_API_KEY format")}let w=await fetch(`${k}/models`,{headers:{Authorization:`Bearer ${q}`},timeout:1e4});if(!w.ok)throw Error(`Failed to fetch models: ${w.statusText}`);let F=(await w.json()).data.filter((z)=>z.id.includes("embedding")).map((z)=>z.id).sort();if(F.length===0)throw Error("No embedding models found");return F}}},category:"core",defaultInInit:!0,required:!0},"gpt-image":{id:"gpt-image",name:"gpt-image-1-mcp",description:"GPT Image generation MCP server",config:{type:"stdio",command:"npx",args:["@napolab/gpt-image-1-mcp"],env:{OPENAI_API_KEY:""}},envVars:{OPENAI_API_KEY:{description:"OpenAI API key for image generation",required:!0,secret:!0}},category:"ai",defaultInInit:!1},perplexity:{id:"perplexity",name:"perplexity-ask",description:"Perplexity Ask MCP server for search and queries",config:{type:"stdio",command:"npx",args:["-y","server-perplexity-ask"],env:{PERPLEXITY_API_KEY:""}},envVars:{PERPLEXITY_API_KEY:{description:"Perplexity API key for search and queries",required:!0,secret:!0}},category:"ai",defaultInInit:!1},context7:{id:"context7",name:"context7",description:"Context7 HTTP MCP server for documentation retrieval",config:{type:"http",url:"https://mcp.context7.com/mcp"},envVars:{CONTEXT7_API_KEY:{description:"Context7 API key for enhanced documentation access",required:!1,secret:!0}},category:"external",defaultInInit:!0},"gemini-search":{id:"gemini-search",name:"gemini-google-search",description:"Gemini Google Search MCP server",config:{type:"stdio",command:"npx",args:["-y","mcp-gemini-google-search"],env:{GEMINI_API_KEY:"",GEMINI_MODEL:"gemini-2.5-flash"}},envVars:{GEMINI_API_KEY:{description:"Google Gemini API key for search functionality",required:!0,secret:!0},GEMINI_MODEL:{description:"Gemini model to use for search",required:!1,default:"gemini-2.5-flash"}},category:"ai",defaultInInit:!1},grep:{id:"grep",name:"grep",description:"GitHub grep MCP server for searching GitHub repositories",config:{type:"http",url:"https://mcp.grep.app"},category:"external",defaultInInit:!0}};function Q(){return Object.keys(x)}function W(k){return Object.entries(x).filter(([,q])=>q.category===k).map(([q])=>q)}function X(){return Object.entries(x).filter(([,k])=>k.defaultInInit).map(([k])=>k)}function Z(){return Object.entries(x).filter(([,k])=>k.envVars&&Object.values(k.envVars).some((q)=>q.required)).map(([k])=>k)}function $(){return Object.entries(x).filter(([,k])=>k.envVars&&Object.values(k.envVars).some((q)=>!q.required)).map(([k])=>k)}function h(){return Object.entries(x).filter(([,k])=>k.envVars&&Object.keys(k.envVars).length>0).map(([k])=>k)}function j(k){let q=x[k];if(!q?.envVars)return[];return Object.entries(q.envVars).filter(([,w])=>w.required).map(([w])=>w)}function B(k){let q=x[k];if(!q?.envVars)return[];return Object.entries(q.envVars).filter(([,w])=>!w.required).map(([w])=>w)}function U(k){let q=x[k];if(!q?.envVars)return[];return Object.keys(q.envVars)}function b(k){let q=x[k];if(!q?.envVars)return[];return Object.entries(q.envVars).filter(([,w])=>w.secret).map(([w])=>w)}function A(k){let q=x[k];if(!q?.envVars)return[];return Object.entries(q.envVars).filter(([,w])=>!w.secret).map(([w])=>w)}function K(k){return k in x}function u(k){let q=x[k];if(!q)throw Error(`Unknown MCP server: ${k}`);return q}export{K as isValidServerID,$ as getServersWithOptionalAPIKeys,h as getServersWithAnyAPIKeys,Z as getServersRequiringAPIKeys,W as getServersByCategory,u as getServerDefinition,b as getSecretEnvVars,j as getRequiredEnvVars,B as getOptionalEnvVars,A as getNonSecretEnvVars,X as getDefaultServers,Q as getAllServerIDs,U as getAllEnvVars,x as MCP_SERVER_REGISTRY};
export{x as K,Q as L};
