import{G}from"./index-4ed5rdsr.js";import{P as Q,T as H}from"./index-9skdpcen.js";import{W as Y,Z}from"./index-b8xrx8ea.js";class V{name="openai";dimensions=1536;apiKey;model;baseURL;constructor(f={}){this.apiKey=f.apiKey||H.getEnvVar("OPENAI_API_KEY")||"",this.model=f.model||"text-embedding-3-small";let q=f.baseURL||H.getEnvVar("OPENAI_BASE_URL","https://api.openai.com/v1");if(q)try{this.baseURL=Q.url.parse(q)}catch(D){console.warn("[WARN] Invalid OPENAI_BASE_URL format, using default"),this.baseURL="https://api.openai.com/v1"}else this.baseURL="https://api.openai.com/v1";if(this.model==="text-embedding-3-large")this.dimensions=3072;else if(this.model==="text-embedding-ada-002")this.dimensions=1536;if(this.apiKey)try{Q.apiKey.parse(this.apiKey)}catch(D){console.warn("[WARN] Invalid OPENAI_API_KEY format. Embeddings will use mock implementation."),this.apiKey=""}else console.warn("[WARN] OPENAI_API_KEY not set. Embeddings will use mock implementation.")}async generateEmbedding(f){if(!this.apiKey)return console.warn("[WARN] Using mock embedding (no API key)"),G(f,this.dimensions);try{let q=await fetch(`${this.baseURL}/embeddings`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${this.apiKey}`},body:JSON.stringify({model:this.model,input:f})});if(!q.ok){let F=await q.text();throw Error(`OpenAI API error: ${q.status} ${F}`)}return(await q.json()).data[0].embedding}catch(q){return console.error("[ERROR] Failed to generate OpenAI embedding:",q),console.warn("[WARN] Falling back to mock embedding"),G(f,this.dimensions)}}async generateEmbeddings(f){if(!this.apiKey)return console.warn("[WARN] Using mock embeddings (no API key)"),f.map((q)=>G(q,this.dimensions));try{let q=await fetch(`${this.baseURL}/embeddings`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${this.apiKey}`},body:JSON.stringify({model:this.model,input:f})});if(!q.ok){let F=await q.text();throw Error(`OpenAI API error: ${q.status} ${F}`)}return(await q.json()).data.map((F)=>F.embedding)}catch(q){return console.error("[ERROR] Failed to generate OpenAI embeddings:",q),console.warn("[WARN] Falling back to mock embeddings"),f.map((D)=>G(D,this.dimensions))}}async listModels(){if(!this.apiKey)throw Error("API key required to list models");try{let f=await fetch(`${this.baseURL}/models`,{method:"GET",headers:{"Content-Type":"application/json",Authorization:`Bearer ${this.apiKey}`}});if(!f.ok){let D=await f.text();throw Error(`OpenAI API error: ${f.status} ${D}`)}return(await f.json()).data.map((D)=>({id:D.id,object:D.object,created:D.created,owned_by:D.owned_by}))}catch(f){if(f instanceof Error)throw Error(`Failed to list models: ${f.message}`);throw Error("Failed to list models: Unknown error")}}async listEmbeddingModels(){return(await this.listModels()).filter((q)=>q.id.includes("embedding")||q.id.includes("text-embedding"))}async testConnection(){try{return await this.listModels(),!0}catch(f){return!1}}async getEmbeddingModelOptions(){return(await this.listEmbeddingModels()).map((q)=>({id:q.id,description:this.getModelDescription(q.id)}))}getModelDescription(f){return{"text-embedding-3-small":"Latest small embedding model (1536 dimensions)","text-embedding-3-large":"Latest large embedding model (3072 dimensions)","text-embedding-ada-002":"Legacy embedding model (1536 dimensions)"}[f]||`Embedding model: ${f}`}}class W{name="mock";dimensions;constructor(f=1536){this.dimensions=f}async generateEmbedding(f){return G(f,this.dimensions)}async generateEmbeddings(f){return f.map((q)=>G(q,this.dimensions))}}async function w(){let f={};try{let{secretUtils:J}=await import("./secret-utils-ebmtds1a.js");f=await J.loadSecrets(process.cwd()).catch(()=>({}))}catch(J){}let q=f.OPENAI_API_KEY||H.getEnvVar("OPENAI_API_KEY"),D=f.OPENAI_BASE_URL||H.getEnvVar("OPENAI_BASE_URL","https://api.openai.com/v1"),F=f.EMBEDDING_MODEL||H.getEnvVar("EMBEDDING_MODEL");if(q)return console.error(`[INFO] Using OpenAI embeddings (${F||"text-embedding-3-small"})`),new V({apiKey:q,baseURL:D,model:F});return console.error("[INFO] Using mock embeddings (no OPENAI_API_KEY)"),new W}function z(f,q={}){let{maxChunkSize:D=1000,overlap:F=100}=q,J=[],N=0;while(N<f.length){let T=Math.min(N+D,f.length),X=f.slice(N,T);if(J.push(X),N=T-F,N>=f.length)break}return J}export{w as getDefaultEmbeddingProvider,z as chunkText,V as OpenAIEmbeddingProvider,W as MockEmbeddingProvider};
export{w as F};
