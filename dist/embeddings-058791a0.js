import{z as F}from"./index-zyg7n85d.js";import{K as V,N as W}from"./index-f47z6pkn.js";class N{name="openai";dimensions=1536;apiKey;model;baseURL;constructor(f={}){if(this.apiKey=f.apiKey||process.env.OPENAI_API_KEY||"",this.model=f.model||"text-embedding-3-small",this.baseURL=f.baseURL||"https://api.openai.com/v1",this.model==="text-embedding-3-large")this.dimensions=3072;else if(this.model==="text-embedding-ada-002")this.dimensions=1536;if(!this.apiKey)console.warn("[WARN] OPENAI_API_KEY not set. Embeddings will use mock implementation.")}async generateEmbedding(f){if(!this.apiKey)return console.warn("[WARN] Using mock embedding (no API key)"),F(f,this.dimensions);try{let q=await fetch(`${this.baseURL}/embeddings`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${this.apiKey}`},body:JSON.stringify({model:this.model,input:f})});if(!q.ok){let D=await q.text();throw Error(`OpenAI API error: ${q.status} ${D}`)}return(await q.json()).data[0].embedding}catch(q){return console.error("[ERROR] Failed to generate OpenAI embedding:",q),console.warn("[WARN] Falling back to mock embedding"),F(f,this.dimensions)}}async generateEmbeddings(f){if(!this.apiKey)return console.warn("[WARN] Using mock embeddings (no API key)"),f.map((q)=>F(q,this.dimensions));try{let q=await fetch(`${this.baseURL}/embeddings`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${this.apiKey}`},body:JSON.stringify({model:this.model,input:f})});if(!q.ok){let D=await q.text();throw Error(`OpenAI API error: ${q.status} ${D}`)}return(await q.json()).data.map((D)=>D.embedding)}catch(q){return console.error("[ERROR] Failed to generate OpenAI embeddings:",q),console.warn("[WARN] Falling back to mock embeddings"),f.map((B)=>F(B,this.dimensions))}}async listModels(){if(!this.apiKey)throw Error("API key required to list models");try{let f=await fetch(`${this.baseURL}/models`,{method:"GET",headers:{"Content-Type":"application/json",Authorization:`Bearer ${this.apiKey}`}});if(!f.ok){let B=await f.text();throw Error(`OpenAI API error: ${f.status} ${B}`)}return(await f.json()).data.map((B)=>({id:B.id,object:B.object,created:B.created,owned_by:B.owned_by}))}catch(f){if(f instanceof Error)throw Error(`Failed to list models: ${f.message}`);throw Error("Failed to list models: Unknown error")}}async listEmbeddingModels(){return(await this.listModels()).filter((q)=>q.id.includes("embedding")||q.id.includes("text-embedding"))}async testConnection(){try{return await this.listModels(),!0}catch(f){return!1}}async getEmbeddingModelOptions(){return(await this.listEmbeddingModels()).map((q)=>({id:q.id,description:this.getModelDescription(q.id)}))}getModelDescription(f){return{"text-embedding-3-small":"Latest small embedding model (1536 dimensions)","text-embedding-3-large":"Latest large embedding model (3072 dimensions)","text-embedding-ada-002":"Legacy embedding model (1536 dimensions)"}[f]||`Embedding model: ${f}`}}class Q{name="mock";dimensions;constructor(f=1536){this.dimensions=f}async generateEmbedding(f){return F(f,this.dimensions)}async generateEmbeddings(f){return f.map((q)=>F(q,this.dimensions))}}async function Y(){let f={};try{let{secretUtils:G}=await import("./secret-utils-x3qnfd3n.js");f=await G.loadSecrets(process.cwd()).catch(()=>({}))}catch(G){}let q=f.OPENAI_API_KEY||process.env.OPENAI_API_KEY,B=f.OPENAI_BASE_URL||process.env.OPENAI_BASE_URL,D=f.EMBEDDING_MODEL||process.env.EMBEDDING_MODEL;if(q)return console.error(`[INFO] Using OpenAI embeddings (${D||"text-embedding-3-small"})`),new N({apiKey:q,baseURL:B,model:D});return console.error("[INFO] Using mock embeddings (no OPENAI_API_KEY)"),new Q}function Z(f,q={}){let{maxChunkSize:B=1000,overlap:D=100}=q,G=[],H=0;while(H<f.length){let J=Math.min(H+B,f.length),T=f.slice(H,J);if(G.push(T),H=J-D,H>=f.length)break}return G}export{Y as getDefaultEmbeddingProvider,Z as chunkText,N as OpenAIEmbeddingProvider,Q as MockEmbeddingProvider};
export{Y as y};
