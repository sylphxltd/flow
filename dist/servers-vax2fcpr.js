import"./index-2mkpa5vm.js";var k={"sylphx-flow":{id:"sylphx-flow",name:"sylphx_flow",description:"Sylphx Flow MCP server for agent coordination and memory management",config:{type:"local",command:["npx","-y","github:sylphxltd/flow","mcp","start","--no-resources"]},category:"core",defaultInInit:!0},"gpt-image":{id:"gpt-image",name:"gpt-image-1-mcp",description:"GPT Image generation MCP server",config:{type:"local",command:["npx","@napolab/gpt-image-1-mcp"],environment:{OPENAI_API_KEY:""}},envVars:{OPENAI_API_KEY:{description:"OpenAI API key for image generation",required:!0,secret:!0}},category:"ai",defaultInInit:!0},perplexity:{id:"perplexity",name:"perplexity-ask",description:"Perplexity Ask MCP server for search and queries",config:{type:"local",command:["npx","-y","server-perplexity-ask"],environment:{PERPLEXITY_API_KEY:""}},envVars:{PERPLEXITY_API_KEY:{description:"Perplexity API key for search and queries",required:!0,secret:!0}},category:"ai",defaultInInit:!0},context7:{id:"context7",name:"context7",description:"Context7 HTTP MCP server for documentation retrieval",config:{type:"remote",url:"https://mcp.context7.com/mcp"},envVars:{CONTEXT7_API_KEY:{description:"Context7 API key for enhanced documentation access",required:!1,secret:!0}},category:"external",defaultInInit:!0},"gemini-search":{id:"gemini-search",name:"gemini-google-search",description:"Gemini Google Search MCP server",config:{type:"local",command:["npx","-y","mcp-gemini-google-search"],environment:{GEMINI_API_KEY:"",GEMINI_MODEL:"gemini-2.5-flash"}},envVars:{GEMINI_API_KEY:{description:"Google Gemini API key for search functionality",required:!0,secret:!0},GEMINI_MODEL:{description:"Gemini model to use for search",required:!1,default:"gemini-2.5-flash"}},category:"ai",defaultInInit:!0},grep:{id:"grep",name:"grep",description:"GitHub grep MCP server for searching GitHub repositories",config:{type:"remote",url:"https://mcp.grep.app"},category:"external",defaultInInit:!0}};function l(){return Object.keys(k)}function p(b){return Object.entries(k).filter(([,h])=>h.category===b).map(([h])=>h)}function q(){return Object.entries(k).filter(([,b])=>b.defaultInInit).map(([b])=>b)}function u(){return Object.entries(k).filter(([,b])=>b.envVars&&Object.values(b.envVars).some((h)=>h.required)).map(([b])=>b)}function w(){return Object.entries(k).filter(([,b])=>b.envVars&&Object.values(b.envVars).some((h)=>!h.required)).map(([b])=>b)}function x(){return Object.entries(k).filter(([,b])=>b.envVars&&Object.keys(b.envVars).length>0).map(([b])=>b)}function z(b){let h=k[b];if(!h?.envVars)return[];return Object.entries(h.envVars).filter(([,j])=>j.required).map(([j])=>j)}function A(b){let h=k[b];if(!h?.envVars)return[];return Object.entries(h.envVars).filter(([,j])=>!j.required).map(([j])=>j)}function B(b){let h=k[b];if(!h?.envVars)return[];return Object.keys(h.envVars)}function D(b){let h=k[b];if(!h?.envVars)return[];return Object.entries(h.envVars).filter(([,j])=>j.secret).map(([j])=>j)}function F(b){let h=k[b];if(!h?.envVars)return[];return Object.entries(h.envVars).filter(([,j])=>!j.secret).map(([j])=>j)}function H(b){return b in k}function J(b){let h=k[b];if(!h)throw Error(`Unknown MCP server: ${b}`);return h}export{H as isValidServerID,w as getServersWithOptionalAPIKeys,x as getServersWithAnyAPIKeys,u as getServersRequiringAPIKeys,p as getServersByCategory,J as getServerDefinition,D as getSecretEnvVars,z as getRequiredEnvVars,A as getOptionalEnvVars,F as getNonSecretEnvVars,q as getDefaultServers,l as getAllServerIDs,B as getAllEnvVars,k as MCP_SERVER_REGISTRY};
export{k as c,l as d,q as e,u as f,z as g,A as h,B as i,D as j};
