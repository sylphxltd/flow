import"./index-5m1f55w0.js";var q={"sylphx-flow":{id:"sylphx-flow",name:"sylphx-flow",description:"Sylphx Flow MCP server for agent coordination and memory management",config:{type:"local",command:["npx","-y","github:sylphxltd/flow","mcp","start"],environment:{OPENAI_API_KEY:"",OPENAI_BASE_URL:"https://api.openai.com/v1",EMBEDDING_MODEL:"text-embedding-3-small"}},envVars:{OPENAI_API_KEY:{description:"OpenAI API key for vector search embeddings",required:!1,secret:!0},OPENAI_BASE_URL:{description:"Base URL for OpenAI-compatible embedding API",required:!1,default:"https://api.openai.com/v1"},EMBEDDING_MODEL:{description:"Embedding model to use for vector search",required:!1,default:"text-embedding-3-small",dependsOn:["OPENAI_API_KEY","OPENAI_BASE_URL"],fetchChoices:async()=>{let h=process.env.OPENAI_BASE_URL||"https://api.openai.com/v1",j=process.env.OPENAI_API_KEY;if(!j)throw Error("OPENAI_API_KEY is required to fetch embedding models");let k=await fetch(`${h}/models`,{headers:{Authorization:`Bearer ${j}`}});if(!k.ok)throw Error(`Failed to fetch models: ${k.statusText}`);let w=(await k.json()).data.filter((u)=>u.id.includes("embedding")).map((u)=>u.id).sort();if(w.length===0)throw Error("No embedding models found");return w}}},category:"core",defaultInInit:!0,required:!0},"gpt-image":{id:"gpt-image",name:"gpt-image-1-mcp",description:"GPT Image generation MCP server",config:{type:"local",command:["npx","@napolab/gpt-image-1-mcp"],environment:{OPENAI_API_KEY:""}},envVars:{OPENAI_API_KEY:{description:"OpenAI API key for image generation",required:!0,secret:!0}},category:"ai",defaultInInit:!0},perplexity:{id:"perplexity",name:"perplexity-ask",description:"Perplexity Ask MCP server for search and queries",config:{type:"local",command:["npx","-y","server-perplexity-ask"],environment:{PERPLEXITY_API_KEY:""}},envVars:{PERPLEXITY_API_KEY:{description:"Perplexity API key for search and queries",required:!0,secret:!0}},category:"ai",defaultInInit:!0},context7:{id:"context7",name:"context7",description:"Context7 HTTP MCP server for documentation retrieval",config:{type:"remote",url:"https://mcp.context7.com/mcp"},envVars:{CONTEXT7_API_KEY:{description:"Context7 API key for enhanced documentation access",required:!1,secret:!0}},category:"external",defaultInInit:!0},"gemini-search":{id:"gemini-search",name:"gemini-google-search",description:"Gemini Google Search MCP server",config:{type:"local",command:["npx","-y","mcp-gemini-google-search"],environment:{GEMINI_API_KEY:"",GEMINI_MODEL:"gemini-2.5-flash"}},envVars:{GEMINI_API_KEY:{description:"Google Gemini API key for search functionality",required:!0,secret:!0},GEMINI_MODEL:{description:"Gemini model to use for search",required:!1,default:"gemini-2.5-flash"}},category:"ai",defaultInInit:!0},grep:{id:"grep",name:"grep",description:"GitHub grep MCP server for searching GitHub repositories",config:{type:"remote",url:"https://mcp.grep.app"},category:"external",defaultInInit:!0}};function z(){return Object.keys(q)}function A(h){return Object.entries(q).filter(([,j])=>j.category===h).map(([j])=>j)}function B(){return Object.entries(q).filter(([,h])=>h.defaultInInit).map(([h])=>h)}function D(){return Object.entries(q).filter(([,h])=>h.envVars&&Object.values(h.envVars).some((j)=>j.required)).map(([h])=>h)}function F(){return Object.entries(q).filter(([,h])=>h.envVars&&Object.values(h.envVars).some((j)=>!j.required)).map(([h])=>h)}function H(){return Object.entries(q).filter(([,h])=>h.envVars&&Object.keys(h.envVars).length>0).map(([h])=>h)}function J(h){let j=q[h];if(!j?.envVars)return[];return Object.entries(j.envVars).filter(([,k])=>k.required).map(([k])=>k)}function L(h){let j=q[h];if(!j?.envVars)return[];return Object.entries(j.envVars).filter(([,k])=>!k.required).map(([k])=>k)}function N(h){let j=q[h];if(!j?.envVars)return[];return Object.keys(j.envVars)}function O(h){let j=q[h];if(!j?.envVars)return[];return Object.entries(j.envVars).filter(([,k])=>k.secret).map(([k])=>k)}function Q(h){let j=q[h];if(!j?.envVars)return[];return Object.entries(j.envVars).filter(([,k])=>!k.secret).map(([k])=>k)}function W(h){return h in q}function X(h){let j=q[h];if(!j)throw Error(`Unknown MCP server: ${h}`);return j}export{W as isValidServerID,F as getServersWithOptionalAPIKeys,H as getServersWithAnyAPIKeys,D as getServersRequiringAPIKeys,A as getServersByCategory,X as getServerDefinition,O as getSecretEnvVars,J as getRequiredEnvVars,L as getOptionalEnvVars,Q as getNonSecretEnvVars,B as getDefaultServers,z as getAllServerIDs,N as getAllEnvVars,q as MCP_SERVER_REGISTRY};
export{q as D,z as E,B as F,D as G,F as H};
