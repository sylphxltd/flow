import{u as H,x as K}from"./index-mgwr4yq4.js";function Q(z){try{let k=V(z);return k=k.replace(/,(\s*[}\]])/g,"$1"),JSON.parse(k)}catch(k){throw Error(`Failed to parse JSONC: ${k instanceof Error?k.message:"Unknown error"}`)}}function V(z){let k="",B=!1,A=!1,D=!1,F=!1;for(let E=0;E<z.length;E++){let q=z[E],G=z[E+1];if(F){k+=q,F=!1;continue}if(q==="\\"&&B){k+=q,F=!0;continue}if(B){if(q==='"')B=!1;k+=q;continue}if(A){if(q===`
`)A=!1,k+=q;continue}if(D){if(q==="*"&&G==="/")D=!1,E++;continue}if(q==='"'){B=!0,k+=q;continue}if(q==="/"&&G==="/"){A=!0,E++;continue}if(q==="/"&&G==="*"){D=!0,E++;continue}k+=q}return k}function X(z,k,B=2){let A={...z};if(k&&!A.$schema)A.$schema=k;let D=JSON.stringify(A,null,B);if(A.mcp&&Object.keys(A.mcp).length>0)return D.replace(/(\s*)"mcp": {/,`$1// MCP (Model Context Protocol) server configuration
$1// See https://modelcontextprotocol.io for more information
$1"mcp": {`);return D}async function Y(z){let B=await(await import("node:fs/promises")).readFile(z,"utf8");return Q(B)}async function Z(z,k,B,A=2){let D=await import("node:fs/promises"),F=X(k,B,A);await D.writeFile(z,F,"utf8")}export{Z as writeJSONCFile,X as stringifyJSONC,Y as readJSONCFile,Q as parseJSONC};
